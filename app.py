# -*- coding: utf-8 -*-
"""
Created on Mon May  8 12:43:06 2023

@author: rhanusa
"""
import dash
from dash import html, dcc
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output
import dashboard_components as dc

#use css to make a class for style=dict(display="inline-block", padding="10px") https://dash.plotly.com/external-resources
            
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP], update_title=None)
app.layout = dbc.Container([
    dbc.Row([dbc.Col([html.Div("kW flowing to battery: ", className="num-display"),
                      html.Span(id="kw_to_battery")]), #kW going from renewables to battery
            dbc.Col([html.Div("Time: ", className="num-display"), html.Span(id="time")])
            ]), #Day and hour
    dbc.Row([dbc.Col(dcc.Graph(id="bat_lvl_graph")), #bar chart w/ battery energy level
            dbc.Col(), #image with windmill icon and battery icon
            dbc.Col([html.Div("kW generated by renewables:", className="num-display"),html.Span(id="kw_gen")])],
            ), #current kW generated by renewables
    dbc.Row(), #row with 3 arrow image 
    dbc.Row([dbc.Col([html.Span(id="kw_to_r1"), html.Div("kW", className="num-display")]), #kW to R1
            dbc.Col([html.Span(id="kw_to_r2"), html.Div("kW", className="num-display")]), #kW to R2
            dbc.Col([html.Span(id="kw_to_condenser"), html.Div("kW", className="num-display")])
            ]), #kW to condenser
    dbc.Row([dbc.Col(), #diagram with the 3 R1's and their status's
            dbc.Col()]), #static image with R2, condenser, and sulfur screen
    dbc.Row([dbc.Col(), #Saturation of 1st R1 in a bar graph
            dbc.Col(), #Saturation of 2nd R1 in a bar graph
            dbc.Col(), #Saturation of 3rd R1 in a bar graph
            dbc.Col(), #text tallying R1 changeovers
            dbc.Col(), #Text tallying S screen changeovers
            dbc.Col()]), #Saturation of sulfur screen in a bar graph
    dbc.Row([dbc.Col(dcc.Graph(id="energy_allocation_graph",figure=dc.fig_e_allo))]),
    dbc.Row([dbc.Col(dcc.Graph(id="reactor1_output_graph", figure=dc.fig_r1), width=6),
            dbc.Col(dcc.Graph(id="reactor2_output_graph", figure=dc.fig_r2), width=6)]),
    dbc.Row([dbc.Col(dcc.Graph(id="r1_rxn_graph", figure=dc.fig_r1_rxn), width=6),
             dbc.Col(dcc.Graph(id="r2_rxn_graph", figure=dc.fig_r2_rxn), width=6)]),
    dcc.Interval(id="interval",interval=100, 
                  n_intervals=0, max_intervals=len(dc.r2_sx_out)-501)])

@app.callback(Output(component_id='reactor1_output_graph', component_property='extendData'),
              Output(component_id='reactor2_output_graph', component_property='extendData'),
              Output(component_id='r1_rxn_graph', component_property='extendData'),
              Output(component_id='r2_rxn_graph', component_property='extendData'),
              Output(component_id='energy_allocation_graph', component_property='extendData'),
              Output(component_id='kw_to_battery', component_property='children'),
              Output(component_id='time', component_property='children'),
              Output(component_id='bat_lvl_graph', component_property='figure'),
              Output(component_id='kw_gen', component_property='children'),
              Output(component_id='kw_to_r1', component_property='children'),
              Output(component_id='kw_to_r2', component_property='children'),
              Output(component_id='kw_to_condenser', component_property='children'),
              Input(component_id='interval', component_property='n_intervals'))

def update1(n_intervals):
    return dc.update1(n_intervals)

if __name__ == "__main__":
    app.run_server(debug=True)