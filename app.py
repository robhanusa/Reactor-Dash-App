# -*- coding: utf-8 -*-
"""
Created on Mon May  8 12:43:06 2023

@author: rhanusa
"""
import dash
from dash import html, dcc
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output
import dashboard_components as dc

app = dash.Dash(__name__, 
                external_stylesheets=[dbc.themes.BOOTSTRAP], 
                update_title=None)

app.layout = dbc.Container([
    dbc.Row([
        
        # kW going from renewables to battery
        dbc.Col([html.Div("Energy flowing to battery: ", 
                           className="num-display", 
                           style={"padding-left":"30em"}),
                  html.Span(id="kw_to_battery", 
                            style={"padding-left":"30em", 
                                   "padding-right":"10px",
                                   "text-decoration-line":"underline",
                                   "font-weight":"bold"}),
                  html.Span("kW")], 
                 width=7), 
        
        # Day and hour
        dbc.Col([html.Div("Time: ", 
                          className="num-display",
                          style={"padding-left":"15em"}),
                 html.Span(id="time")], 
                width=5)
            ]), 
    dbc.Row([
        
        # Bar chart w/ battery energy level
        dbc.Col([html.Div(dcc.Graph(id="bat_lvl_graph"), 
                           style={"float":"right"})], 
                 width=3), 
        
        # Image with windmill icon and battery icon
        dbc.Col([html.Img(id="img_energy_flow",
                          width = "600em")], 
                width=6), 
        
        # Current kW generated by renewables
        dbc.Col([html.Div("Energy generated by renewables:", 
                          className="num-display",
                          style={"padding-top":"65px"}),
                 html.Br(),
                 html.Span(id="kw_gen", 
                           style={"padding":"0 10px",
                                  "text-decoration-line":"underline",
                                  "font-weight":"bold"}), 
                 html.Span("kW")],
                width=3)
        ]), 
    dbc.Row(
        
        # 3 arrow image
        dbc.Col([html.Img(src=app.get_asset_url("three_arrows.png"), 
                          width = "940em", 
                          style={"padding-left":"140px"})],
                )),  
    dbc.Row([
        
        # kW to R1
        dbc.Col([html.Span(id="kw_to_r1", 
                          style={"padding-left":"140px"}), 
                html.Div("kW", 
                         className="num-display")],
                width=4), 
        
        # kW to R2
        dbc.Col([html.Span(id="kw_to_r2",
                           style={"padding-left":"140px"}), 
                 html.Div("kW", 
                          className="num-display")],
                width=2), 
        
        # kW to condenser
        dbc.Col([html.Span(id="kw_to_condenser", 
                           style={"padding-left":"120px"}), 
                 html.Div("kW", 
                          className="num-display")],
                width=6)
            ]), 
    dbc.Row([
        
        # Diagram with the 3 R1's and their status's
        dbc.Col([html.Img(id="img_r1_status",
                  width = "450em")], 
                 width=4),
        
        #static image with R2, condenser, and sulfur screen
        dbc.Col([html.Br(),
                 html.Img(src=app.get_asset_url("S_reactor_to_filter.png"),
                          width = "750em")], 
                width=8)
        ]), 
    dbc.Row([
        
        # Text "Saturation"
        dbc.Col([html.Br(),
                 html.Div("Saturation", 
                          style={"font-size":"24px",
                                 "padding-left":"100px"})], 
                width=3),
        dbc.Col(html.Br(),width=6),
        
        # Text "Saturation"
        dbc.Col([html.Br(),
                 html.Div("Saturation", 
                          style={"font-size":"24px",
                                 "padding-left":"107px"})], 
                width=3)
        ]),
    dbc.Row([
        dbc.Col(dcc.Graph(id="fig_lvl_r1_1"), width=1), #Saturation of 1st R1
        dbc.Col(dcc.Graph(id="fig_lvl_r1_2"), width=1), #Saturation of 2nd R1
        dbc.Col(dcc.Graph(id="fig_lvl_r1_3"), width=1), #Saturation of 3rd R1
        
        # R1 changeover tally
        dbc.Col([html.Span(id="r1_changeover_tally",
                           style={"padding-left":"10px",
                                  "text-decoration-line":"underline",
                                  "font-weight":"bold"}), 
                 html.Div("Total reactor 1 changeovers", 
                          className="num-display")]), 
        
        #Text tallying S screen changeovers
        dbc.Col([html.Span(id="sx_changeovers",
                           style={"padding-left":"160px",
                                  "text-decoration-line":"underline",
                                  "font-weight":"bold"}), 
                 html.Div("Total filter changes", 
                          className="num-display")]),
        
        #Saturation of sulfur screen in a bar graph
        dbc.Col(dcc.Graph(id="fig_sx_sat"), width=1), 
        dbc.Col(html.Br(), width=1)
        ]), 
    dbc.Row([
        dbc.Col(dcc.Graph(id="energy_allocation_graph", 
                          figure=dc.fig_e_allo))]),
    dbc.Row([
        dbc.Col(dcc.Graph(id="r2_rxn_graph", 
                          figure=dc.fig_r2_rxn), 
                width=6),
        dbc.Col(dcc.Graph(id="reactor2_output_graph", 
                          figure=dc.fig_r2), 
                width=6)
        ]),
    
    dcc.Interval(id="interval",interval=300, 
                  n_intervals=0, max_intervals=len(dc.r2_sx_out)-501)
    ])

# Callback func: combining all outputs into one callback helps with performance
@app.callback(Output(component_id='kw_to_battery', component_property='children'),
              Output(component_id='time', component_property='children'),
              Output(component_id='bat_lvl_graph', component_property='figure'),
              Output(component_id='img_energy_flow', component_property='src'),
              Output(component_id='kw_gen', component_property='children'),
              Output(component_id='kw_to_r1', component_property='children'),
              Output(component_id='kw_to_r2', component_property='children'),
              Output(component_id='kw_to_condenser', component_property='children'),
              Output(component_id='img_r1_status', component_property='src'),
              Output(component_id='fig_lvl_r1_1', component_property='figure'),
              Output(component_id='fig_lvl_r1_2', component_property='figure'),
              Output(component_id='fig_lvl_r1_3', component_property='figure'),
              Output(component_id='r1_changeover_tally', component_property='children'),
              Output(component_id='sx_changeovers', component_property='children'),
              Output(component_id='fig_sx_sat', component_property='figure'),
              Output(component_id='energy_allocation_graph', component_property='extendData'),
              Output(component_id='reactor2_output_graph', component_property='extendData'),
              Output(component_id='r2_rxn_graph', component_property='extendData'),
              Input(component_id='interval', component_property='n_intervals'))

def update(n_intervals):
    return dc.update(n_intervals)

if __name__ == "__main__":
    app.run_server(debug=True)